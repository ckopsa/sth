#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: Spiral
#+DATE: <2017-04-21 Fri>
#+AUTHOR: Colton Kopsa
#+EMAIL: Aghbac@Aghbac.local
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.1.1 (Org mode 9.0.3)

* Spiral
** Meetings
*** *Requirements Gathering*
**** Attendants
     Owner, Secretary, Veteran Software Engineer, UX Designer, Technical Writer
**** Agenda
     - Clarify Software Requirements
**** Expectations
     - Generate/Revise *Requirements Plan* and *Life-Cycle Plan*
**** Frequency
     - Once per cycle
*** *Risk Analysis*
**** Attendants
     Owner, Veteran Software Engineer
**** Agenda
     - Identify risk and alternate solutions
**** Expectations
     - If any risk is found during the risk analysis then alternate solutions
       are suggested and implemented
**** Frequency
     Once per cycle. 
*** *Prototype*
**** Attendants
     Owner, Technical Writer, UX Designers
**** Agenda
     - /Analysis/
       - /Perform Heuristic Analysis/
       - /Create Personas that uniquely represent members of the target audience/
       - /Create Scenarios that represent use cases that users will encounter/
       - /Create Evaluation Criterion to determine the quality of the interface/
     - /Design/
       - /Write an Executive Summary that succinctly states the purpose of the
         interface/
       - /Generate Prototypes that fulfill the Evaluation Criterion/
       - /Write a Specification that contains a complete set of the design
         decisions for the interface/
**** Expectations
     - Generate/revise *Interface Specification* Document
**** Frequency
     Once per cycle. 

*** *Software Requirements*
**** Attendants
     Owner, Secretary, Veteran Software Engineer, Technical Writer
**** Agenda
     - Clarify and define Software Requirements
**** Expectations
     - Generate *Development Plan* Document
**** Frequency
     Typically once, unless requirements change.
*** *Requirements Validation*
**** Attendants
     Owner, Secretary, Veteran Software Engineer, Technical Writer
**** Agenda
     - Ensure Software Requirements meet requirements defined by customer
**** Expectations
     - Validate *Development Plan* Document
**** Frequency
     Typically once, unless requirements change.

*** *Software Product Design*
**** Attendants
     Owner, Veteran Software Engineer, Veteran UX Designer, Technical Writer,
     Veteran Quality Assurance Tester
**** Agenda
     - Using the requirements specified in the *Development Plan* create a
       *Integration and Test Plan*
**** Expectations
     - Generate *Integration and Test plan*
**** Frequency
     Typically once. This is done after the *Development Plan* and before the
     final implementation phase.
*** *Design Validation and Verification*
**** Attendants
     Owner, Veteran Software Engineer, Veteran UX Designer, Technical Writer,
     Veteran Quality Assurance Tester
**** Agenda
     - Determine flaws discovered in the *Software Product Design* and
       redesign as necessary
     - Create a test plan that ensures software is ready for production use
**** Expectations
     - Validate and verify the *Integration and test plan*
**** Frequency
     Typically once. This is done after the *Development Plan* and before the
     final implementation phase.

*** *Integration and Test*
**** Attendants
     Owner, Veteran Software Engineer, UX Designers, Customer
**** Agenda
     - Review code to determine its effectiveness in completing the task it was
       designed for
     - Go through current design and ensure software is being built to
       customer's satisfaction
**** Expectations
     - Revisions to design and code as flaws/needs arise
**** Frequency
     Several times during the final implementation phase.

*** *Acceptance Test*
**** Attendants
     Owner, Quality Assurance Veteran, Software Developer Veteran, Technical
     Writer, Customer
**** Agenda
     - Walk the customer through final version of the product to ensure it meets
       expectations
     - Walk through the test plan, final plan, and interface design and show how
       it meets customer's requirements
**** Expectations
     - Receive customer's confirmation that the software meets the requirements
**** Frequency
     Typically once at the end of the project.
*** /Weekly Planning Meetings/
**** Attendants
     Software Engineers, UX Designers, Owner, Technical Writer
**** Agenda
     - Establish tasks to do within the week to complete the project
**** Expectations
     - List of tasks to be accomplished within the following week.
**** Frequency
     Weekly during implementation phase of spiral.
*** /Retrospectives/
**** Attendants
     Software Engineers, UX Designers, Owner, Technical Writer
**** Agenda
     - Discuss progress of project
     - Discuss successes and failures of previous week
     - Discuss what can be done to reproduce successes
     - Discuss what can be done to prevent failures
**** Expectations
     - List of lessons learned from previous weeks
**** Frequency
     Weekly, done day before Weekly Planning Meeting
** Documents
*** *Requirements Plan*
**** Author/Contributors
     - Author: Technical Writer
     - Contributors: Customer, Owner, Veteran Software Engineer, Veteran UX
       Designer
**** Audience
     Software Engineers & UX Designers
**** Purpose
     Define the requirements of the customer to determine the needs of the
     project and when the project is complete.
**** Deadline/Time Period
     Must be done before everything else.
*** *Development Plan*
**** Author/Contributors
     - Author: Technical Writer
     - Contributors: Owner, Veteran Software Engineer
**** Audience
     Software Engineers
**** Purpose
     To take the requirements specified by the customer and turn them into
     technical requirements/tasks that will need to be accomplished in order for
     the project to be complete. 
**** Deadline/Time Period
     This will be produced before any software design is written.
*** /Interface Specification/
**** Author/Contributors
     - Author: Technical Writer
     - Contributors: Owner, Veteran UX Designer
**** Audience
     UX Designers
**** Purpose
     Develop an interface standard that defines the look of the end product to avoid
     confusion and misinterpretation of the design. This will allow each
     designer to work independently while creating the same design with accuracy
     and precision. This design will meet the interface needs of the customer.
**** Deadline/Time Period
     This will happen before code is written for the interface.
*** *Integration and Test Plan*
**** Author/Contributors
     - Author: Technical Writer
     - Contributors: Veteran Software Engineer, Owner
**** Audience
     Software Engineers
**** Purpose
     To take the requirements specified in the *Development Plan* and convert
     them into design decisions that break up the project into components that
     can be distributed among developers to develop *Code* and *Unit tests*, and
     then to Quality Assurance Testers to perform testing. This will also
     include reviewing the project with the customer to confirm acceptance and
     writing the necessary documentation for the customer to use the software.
**** Deadline/Time Period
     This will be produced after the *Development Plan* has been completed.
*** /Operating Instructions/
**** Author/Contributors
     Author: Technical Writer
     Contributors: Veteran Software Engineer, Veteran UX Designer, Owner
**** Audience
     Customer
**** Purpose
     Develop comprehensive operating instructions for the software documenting
     each interface with its possible inputs and expected outputs, along with a
     description of how each interface can be used.
**** Deadline/Time Period
     This will be produced before the software is delivered to the customer.
** Roles
*** /Middle-persons/
**** Qualifications
     - Interpersonal/Interteam skills
**** Responsibilities
     - Relay information from development team's progress on product to stakeholders
     - Relay information from stakeholders' needs to development team
**** Persons
     Owner, Secretaries
*** /Technical Writer/
**** Qualifications
     - Ability to turn technical information into something easily understood
     - Knowledge of Waterfall documents and how to generate them properly
**** Responsibilities
     - Create and maintain necessary documents generated during design meetings
     - Create Operating Instructions for customer to easily and effectively
       operate software
**** Persons
     Technical Writer
*** /Developers/
**** Qualifications
     - Ability to turn technical requirements into code
**** Responsibilities
     - Take the design specified in the design document and turn it into code
     - Create documentation for written code to explain purpose and implementation
**** Persons
     Software Engineers (Developers)
*** /UX Designer/
**** Qualifications
     - Ability to turn user-interface related requirements into code
**** Responsibilities
     - Take the UI design specified in the Interface Design and turn it into code
     - Create documentation for written code to explain purpose and implementation
**** Persons
     UX Designers, Technical Writer, Software Engineers
*** /Quality Assurance Tester/
**** Qualifications
     - Ability to turn requirements into code
     - Understanding of software inputs/outputs to test them appropriately
**** Responsibilities
     - Test code to ensure it meets design specifications
     - Test the UI to ensure it meets design specifications
     - Create documentation for bugs to be fixed
**** Persons
     Software Engineers (Testers)
*** /Miscellaneous/
**** Qualifications
     - Eye for cleanliness and organization
**** Responsibilities
     - Keep workplace clean and organized
**** Persons
     Custodian
** Checkpoints
*** Phase 1
**** Length
     5 Days
**** Exit Criteria
     - Analyzed Risks
     - Created Initial Prototype
     - Developed Requirements Plan
*** Phase 2
**** Length
     8 Days
**** Exit Criteria
     - Analyzed Risks
     - Improved Prototype
     - Generated and Validated Software Requirements
     - Developed Development Plan
*** Phase 3
**** Length
     5 Days
**** Exit Criteria
     - Analyzed Risks
     - Improved Prototype
     - Generated, Validated and Verified Software Product Design
     - Developed Integration and Test Plan

*** Phase 4
**** Length
     5 Days
**** Exit Criteria
     - Analyzed Risks
     - Improved Prototype
     - Implemented Software Product Design into Code
     - Developed Unit Tests as Required in the Integration and Test Plan
     - Performed Testing as Specified in the Integration and Test Plan
     - Passed Acceptance Test of Customer
     - Implemented Software into Customer System
     - Delivered Necessary Documentation

* Reflection
** Viability
   I feel like this is a viable plan that can be accomplish with my team and,
   given a the correct scenario, could yield success.
** Efficiency
   The spiral model suffers in efficiency because of the time spend in the risk
   analysis phase for such a small project. Because the project is already low
   risk, much time would be wasted analyzing the risks and producing prototypes,
   when no real apparent risks would be discovered.
** Risk
   Because risk analysis is performed so often, the project itself wouldn't have
   much risk of succeeding. The greater risk, I feel, would be going over
   budget/time because of the thoroughness of the risk analysis and prototyping.
